#!/usr/bin/env python3
import os
import sys
import re
import argparse
from collections import deque

def find_dts_files(main_dts_path):
    """
    递归查找所有关联的dts/dtsi文件
    返回文件绝对路径列表
    """
    main_dts_path = os.path.abspath(main_dts_path)
    base_dir = os.path.dirname(main_dts_path)
    
    processed = set()
    todo = deque([(main_dts_path, base_dir)])
    all_files = []
    
    while todo:
        file_path, current_base = todo.popleft()
        
        if file_path in processed:
            continue
        processed.add(file_path)
        all_files.append(file_path)
        
        try:
            with open(file_path, 'r') as f:
                for line in f:
                    include_match = re.search(
                        r'^\s*(?:#include|/include/)\s*["<]([^">]+)[">]', 
                        line
                    )
                    if not include_match:
                        continue
                    
                    included = include_match.group(1)
                    search_paths = [
                        os.path.join(os.path.dirname(file_path), included),
                        os.path.join(base_dir, included)
                    ]
                    
                    found = False
                    for test_path in search_paths:
                        test_path = os.path.normpath(test_path)
                        if os.path.exists(test_path):
                            new_base = os.path.dirname(test_path)
                            todo.append((test_path, new_base))
                            found = True
                            break
                    
                    if not found:
                        print(f"警告: 包含文件未找到 - {included} @ {file_path}", file=sys.stderr)
        except IOError as e:
            print(f"错误: 无法读取文件 {file_path} - {str(e)}", file=sys.stderr)
    
    return all_files

def search_in_dts(files, patterns, options):
    """在文件列表中根据选项搜索多个模式"""
    results = []
    compiled_patterns = []
    
    flags = 0
    if options.ignore_case:
        flags |= re.IGNORECASE
    
    # 编译所有模式
    for pattern in patterns:
        if options.word_regexp:
            pattern = r'\b' + pattern + r'\b'
        compiled_patterns.append(re.compile(pattern, flags))
    
    for file_path in files:
        try:
            with open(file_path, 'r') as f:
                for line_num, line in enumerate(f, 1):
                    clean_line = line.rstrip('\n\r')
                    
                    # 检查所有模式是否匹配
                    matched = any(p.search(clean_line) for p in compiled_patterns)
                    
                    # 反转匹配逻辑（-v 选项）
                    if options.invert_match:
                        matched = not matched
                    
                    if matched:
                        results.append({
                            'file': file_path,
                            'line': line_num,
                            'content': clean_line
                        })
        except IOError as e:
            print(f"错误: 读取文件失败 {file_path} - {str(e)}", file=sys.stderr)
    
    return results

def main():
    parser = argparse.ArgumentParser(
        description='增强版设备树搜索工具（支持类grep选项）',
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('dts_file', help='主设备树文件路径')
    parser.add_argument('patterns', nargs='+', help='一个或多个搜索模式')
    parser.add_argument('-i', '--ignore-case', 
                        action='store_true', 
                        help='忽略大小写匹配（-i 选项）')
    parser.add_argument('-w', '--word-regexp', 
                        action='store_true', 
                        help='整词匹配（-w 选项）')
    parser.add_argument('-v', '--invert-match', 
                        action='store_true', 
                        help='反转匹配（-v 选项，输出不匹配的行）')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.dts_file):
        print(f"错误: 主文件未找到 - {args.dts_file}", file=sys.stderr)
        sys.exit(2)
    
    try:
        dts_files = find_dts_files(args.dts_file)
    except Exception as e:
        print(f"文件收集失败: {str(e)}", file=sys.stderr)
        sys.exit(3)
    
    search_results = search_in_dts(dts_files, args.patterns, args)
    
    # 打印结果摘要
    print(f"搜索范围包含 {len(dts_files)} 个设备树文件")
    
    if not search_results:
        pattern_str = ", ".join([f"'{p}'" for p in args.patterns])
        print(f"未找到匹配模式 {pattern_str}")
        sys.exit(0)
    
    # 详细结果输出
    pattern_str = ", ".join([f"'{p}'" for p in args.patterns])
    options = []
    if args.ignore_case: options.append("忽略大小写")
    if args.word_regexp: options.append("整词匹配")
    if args.invert_match: options.append("反转匹配")
    
    options_str = "（" + " + ".join(options) + "）" if options else ""
    
    print(f"找到 {len(search_results)} 处匹配{options_str} [{pattern_str}]:")
    for i, res in enumerate(search_results, 1):
        rel_path = os.path.relpath(res['file'])
        print(f"\n[{i}] {rel_path}:{res['line']}")
        print(f"    {res['content']}")
    
    sys.exit(0)

if __name__ == "__main__":
    main()
